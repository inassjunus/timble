// Code generated by mockery v2.52.2. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"

// PostgresInterface is an autogenerated mock type for the PostgresInterface type
type PostgresInterface struct {
	mock.Mock
}

// Exec provides a mock function with given fields: query, args
func (_m *PostgresInterface) Exec(query string, args ...interface{}) error {
	var _ca []interface{}
	_ca = append(_ca, query)
	_ca = append(_ca, args...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for Exec")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, ...interface{}) error); ok {
		r0 = rf(query, args...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetFirst provides a mock function with given fields: record, condition, args
func (_m *PostgresInterface) GetFirst(record interface{}, condition string, args ...interface{}) error {
	var _ca []interface{}
	_ca = append(_ca, record, condition)
	_ca = append(_ca, args...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetFirst")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(interface{}, string, ...interface{}) error); ok {
		r0 = rf(record, condition, args...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewPostgresInterface creates a new instance of PostgresInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewPostgresInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *PostgresInterface {
	mock := &PostgresInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
