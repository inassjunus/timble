// Code generated by mockery v2.52.2. DO NOT EDIT.

package mocks

import (
	entity "timble/module/users/entity"

	mock "github.com/stretchr/testify/mock"
)

// PostgresRepository is an autogenerated mock type for the PostgresRepository type
type PostgresRepository struct {
	mock.Mock
}

// GetUserByID provides a mock function with given fields: id
func (_m *PostgresRepository) GetUserByID(id uint) (*entity.User, error) {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for GetUserByID")
	}

	var r0 *entity.User
	var r1 error
	if rf, ok := ret.Get(0).(func(uint) (*entity.User, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(uint) *entity.User); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.User)
		}
	}

	if rf, ok := ret.Get(1).(func(uint) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUserByUsername provides a mock function with given fields: username
func (_m *PostgresRepository) GetUserByUsername(username string) (*entity.User, error) {
	ret := _m.Called(username)

	if len(ret) == 0 {
		panic("no return value specified for GetUserByUsername")
	}

	var r0 *entity.User
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*entity.User, error)); ok {
		return rf(username)
	}
	if rf, ok := ret.Get(0).(func(string) *entity.User); ok {
		r0 = rf(username)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.User)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(username)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// InsertUser provides a mock function with given fields: user
func (_m *PostgresRepository) InsertUser(user entity.User) error {
	ret := _m.Called(user)

	if len(ret) == 0 {
		panic("no return value specified for InsertUser")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(entity.User) error); ok {
		r0 = rf(user)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateUserPremium provides a mock function with given fields: user, field, value
func (_m *PostgresRepository) UpdateUserPremium(user entity.User, value interface{}) error {
	ret := _m.Called(user, value)

	if len(ret) == 0 {
		panic("no return value specified for UpdateUserPremium")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(entity.User, interface{}) error); ok {
		r0 = rf(user, value)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpsertUserReaction provides a mock function with given fields: reaction
func (_m *PostgresRepository) UpsertUserReaction(reaction entity.ReactionParams) error {
	ret := _m.Called(reaction)

	if len(ret) == 0 {
		panic("no return value specified for UpsertUserReaction")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(entity.ReactionParams) error); ok {
		r0 = rf(reaction)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewPostgresRepository creates a new instance of PostgresRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewPostgresRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *PostgresRepository {
	mock := &PostgresRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
