// Code generated by mockery v2.52.2. DO NOT EDIT.

package mocks

import (
	context "context"
	entity "timble/module/users/entity"

	mock "github.com/stretchr/testify/mock"
)

// UserUsecase is an autogenerated mock type for the UserUsecase type
type UserUsecase struct {
	mock.Mock
}

// Create provides a mock function with given fields: ctx, params
func (_m *UserUsecase) Create(ctx context.Context, params entity.UserRegistrationParams) (entity.UserToken, error) {
	ret := _m.Called(ctx, params)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 entity.UserToken
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, entity.UserRegistrationParams) (entity.UserToken, error)); ok {
		return rf(ctx, params)
	}
	if rf, ok := ret.Get(0).(func(context.Context, entity.UserRegistrationParams) entity.UserToken); ok {
		r0 = rf(ctx, params)
	} else {
		r0 = ret.Get(0).(entity.UserToken)
	}

	if rf, ok := ret.Get(1).(func(context.Context, entity.UserRegistrationParams) error); ok {
		r1 = rf(ctx, params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// React provides a mock function with given fields: ctx, params
func (_m *UserUsecase) React(ctx context.Context, params entity.ReactionParams) error {
	ret := _m.Called(ctx, params)

	if len(ret) == 0 {
		panic("no return value specified for React")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, entity.ReactionParams) error); ok {
		r0 = rf(ctx, params)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Show provides a mock function with given fields: ctx, userID
func (_m *UserUsecase) Show(ctx context.Context, userID uint) (*entity.UserPublic, error) {
	ret := _m.Called(ctx, userID)

	if len(ret) == 0 {
		panic("no return value specified for Show")
	}

	var r0 *entity.UserPublic
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uint) (*entity.UserPublic, error)); ok {
		return rf(ctx, userID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uint) *entity.UserPublic); ok {
		r0 = rf(ctx, userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.UserPublic)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uint) error); ok {
		r1 = rf(ctx, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewUserUsecase creates a new instance of UserUsecase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewUserUsecase(t interface {
	mock.TestingT
	Cleanup(func())
}) *UserUsecase {
	mock := &UserUsecase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
